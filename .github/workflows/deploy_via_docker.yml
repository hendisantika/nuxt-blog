name: Deploy Blog via Docker
on:
  push:
    branches:
      - main
env:
  ENV_GITHUB: ${{ vars.ENV_GITHUB }}
  IMAGE_TAG: ${{ github.run_number }}
  CONTAINER_NAME: blog
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.actor }}/nuxt-blog:latest

jobs:
  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run Production
        run: |
          #          cp .env.example .env
          pnpm run build

      - name: Copy docker-compose.yml file to server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: docker-compose.yml
          remote: /var/www/blog/docker-compose.yml
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          privateKey: ${{ secrets.SSH_KEY }}
          recursive: true
          verbose: true
          dotfiles: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Scrape build info
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: hendisantika/nuxt-blog:${{ github.run_number }}
          build-args: |
            GIT_VERSION_TAG=${{ env.RELEASE_VERSION }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            GIT_VERSION_HASH=${{ github.sha }}
            DOCKER_CONTAINER_TAG=${{ github.run_number }}
  #  deploy:
  #    if: ${{ github.ref == 'refs/heads/master' }}
  #    runs-on: ubuntu-latest
  #    needs:
  #      - docker-build
  #    steps:
  #      - uses: actions/checkout@v4.1.1
  #
  #      - name: Add Server key
  #        run: |
  #          touch key.txt && echo "${{ secrets.SSH_KEY }}" > key.txt
  #          chmod 600 key.txt
  #
  #      - name: Make executeable
  #        run: |
  #          git update-index --chmod=+x ./scripts/deploy.sh
  #          chmod +x ./scripts/deploy.sh
  #
  #      - name: Pull environment form variable
  #        run: |
  #          echo "$ENV_GITHUB" > .env_github
  #
  #      - id: dotenv_github
  #        name: Read dotenv file for github env
  #        uses: falti/dotenv-action@v1.0.4
  #        with:
  #          path: '.env_github'
  #          export-variables: true
  #          log-variables: false
  #          mask-variables: true
  #          keys-case: 'bypass'
  #
  #      - name: Deploy the application
  #        env:
  #          SERVER_HOST: ${{ secrets.HOST }}
  #          SERVER_PORT: ${{ secrets.SSH_PORT }}
  #          SERVER_USER: ${{ secrets.SSH_USER }}
  #          SERVER_KEY: ${{ secrets.SSH_KEY }}
  #          CONTAINER_NAME: dalim-fe
  #          DOCKER_CONTAINER_TAG: ${{ secrets.DOCKER_CONTAINER_TAG }}
  #          #          IMAGE_TAG: ${{ env.IMAGE_TAG }}
  #          IMAGE_TAG: ${{ github.run_number }}
  #        run: |
  #          set -e
  #          ssh -p ${SERVER_PORT} ${SERVER_USER}@${SERVER_HOST} -i key.txt -t -t -o StrictHostKeyChecking=no << 'ENDSSH'
  #          #          docker pull hendisantika/dalim-fe:${{ env.IMAGE_TAG }}
  #          ./scripts/deploy.sh

  publish:
    name: publish image
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      - uses: actions/checkout@v3
      - name: Login
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login docker.io -u ${{ github.actor }} --password-stdin
      - name: Build and Publish Backend
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    needs: publish
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cd /var/www/blog && docker compose pull && docker compose up -d && exit"
