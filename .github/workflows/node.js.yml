name: Deploy Blog WEB APP
on:
  push:
    branches:
      - main
jobs:
  project-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Pull environment form variable
        run: echo "$ENV_GITHUB" > .env_github

      - uses: actions/cache@v3
        name: Setup npm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-npm-store-${{ hashFiles('**/npm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-npm-store-

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Run Production
        run: npm run build

      - name: Upload app-artifacts for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: .output

      - name: Download app-artifacts for distribution
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: |
            ${{ github.workspace }}
            !.git/
            /var/www/blog/

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload app-artifacts to remote folder
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".output"
          target: "/var/www/blog/.output"
          strip_components: 1

      - name: Prepare Blog NuxtJS 3 Web App
        run: |
          echo ":: =========================== ::"
          echo "Run Blog NuxtJS 3 Web App"
          echo "HENDI SANTIKA Blog"
          echo ":: =========================== ::"

      - name: Restart webapp via pm2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            export PATH=$PATH:/home/deployer/.nvm/versions/node/v20.10.0/bin;
            pm2 restart "BLOG WEB APP"

  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - project-build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/cache@v3
        name: Setup npm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-npm-store-${{ hashFiles('**/npm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-npm-store-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Scrape build info
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: hendisantika/nuxt-blog:${{ github.run_number }}
          build-args: |
            GIT_VERSION_TAG=${{ env.RELEASE_VERSION }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            GIT_VERSION_HASH=${{ github.sha }}
            DOCKER_CONTAINER_TAG=${{ github.run_number }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      - uses: actions/checkout@v4

      - name: Add Server key
        run: |
          touch key.txt && echo "${{ secrets.SERVER_KEY }}" > key.txt
          chmod 600 key.txt

      - name: Make executeable
        run: |
          git update-index --chmod=+x ./scripts/deploy.sh
          chmod +x ./scripts/deploy.sh

      #      - name: SCP file to server
      #        uses: garygrossgarten/github-action-scp@release
      #        with:
      #          local: deploy.sh
      #          remote: /var/www/blog/
      #          host: ${{ secrets.SSH_HOST }}
      #          username: ${{ secrets.SSH_USER }}
      #          privateKey: ${{ secrets.SSH_KEY }}
      #          recursive: true
      #          verbose: true
      #          dotfiles: true
      #      - name: Copy script(s) to server
      #        uses: garygrossgarten/github-action-scp@release
      #        with:
      #          local: ./scripts/deploy.sh
      #          remote: /var/www/blog/
      #          host: ${{ secrets.SSH_HOST }}
      #          username: ${{ secrets.SSH_USERNAME }}
      #          privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
      #          recursive: true
      #          verbose: true
      #          dotfiles: true

      - name: Upload app-artifacts to remote folder
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: scripts/deploy.sh
          target: /var/www/blog/
          strip_components: 1

      - name: Deploy the application
        env:
          SERVER_HOST: ${{ secrets.SSH_HOST }}
          SERVER_PORT: ${{ secrets.SSH_PORT }}
          SERVER_USER: ${{ secrets.SSH_USERNAME }}
          SERVER_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -e
          ./scripts/deploy.sh
